{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { UploadImageClass } from 'src/app/shared/models/upload-image-class';\nimport { Imagevalidator } from '../helpers/imagehelper/imagevalidator';\nimport * as i0 from \"@angular/core\";\nexport let ImagedirectiveDirective = /*#__PURE__*/(() => {\n  class ImagedirectiveDirective extends Imagevalidator {\n    constructor() {\n      super(...arguments);\n      this.files = [];\n      this.mouseOver = new EventEmitter();\n    }\n\n    onDragEnter(event) {\n      this.preventAndStop(event);\n      this.mouseOver.emit(true);\n    }\n\n    onDragLeave() {\n      this.mouseOver.emit(false);\n    }\n\n    onDrop(event) {\n      const dataTransfer = this.getDataTransfer(event);\n\n      if (!dataTransfer) {\n        return;\n      }\n\n      this.preventAndStop(event);\n      this.extractFiles(dataTransfer.files);\n      this.mouseOver.emit(false);\n    }\n\n    getDataTransfer(event) {\n      return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;\n    }\n\n    extractFiles(fileList) {\n      for (const property in Object.getOwnPropertyNames(fileList)) {\n        const tempFile = fileList[property];\n\n        if (this.canBeUploaded(tempFile)) {\n          const newFile = new UploadImageClass(tempFile);\n          this.files.push(newFile);\n        }\n      }\n    }\n\n    canBeUploaded(file) {\n      if (!this.checkDropped(file.name, this.files) && this.validateType(file.type)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    preventAndStop(event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n  }\n\n  ImagedirectiveDirective.ɵfac = /*@__PURE__*/function () {\n    let ɵImagedirectiveDirective_BaseFactory;\n    return function ImagedirectiveDirective_Factory(t) {\n      return (ɵImagedirectiveDirective_BaseFactory || (ɵImagedirectiveDirective_BaseFactory = i0.ɵɵgetInheritedFactory(ImagedirectiveDirective)))(t || ImagedirectiveDirective);\n    };\n  }();\n\n  ImagedirectiveDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ImagedirectiveDirective,\n    selectors: [[\"\", \"appImagedirective\", \"\"]],\n    hostBindings: function ImagedirectiveDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"dragover\", function ImagedirectiveDirective_dragover_HostBindingHandler($event) {\n          return ctx.onDragEnter($event);\n        })(\"dragleave\", function ImagedirectiveDirective_dragleave_HostBindingHandler($event) {\n          return ctx.onDragLeave($event);\n        })(\"drop\", function ImagedirectiveDirective_drop_HostBindingHandler($event) {\n          return ctx.onDrop($event);\n        });\n      }\n    },\n    inputs: {\n      files: \"files\"\n    },\n    outputs: {\n      mouseOver: \"mouseOver\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return ImagedirectiveDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}