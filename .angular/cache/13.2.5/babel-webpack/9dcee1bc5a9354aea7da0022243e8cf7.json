{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nlet ProductsService = class ProductsService {\n  constructor(firebase, firestore) {\n    this.firebase = firebase;\n    this.firestore = firestore;\n    this.productsCollection = firestore.collection('products');\n    this.getProductList();\n  } // tslint:disable-next-line: typedef\n\n\n  getProductList() {\n    this.selectproduct = this.productsCollection.snapshotChanges().pipe(map(actions => actions.map(a => a.payload.doc.data())));\n  }\n\n  insertProductList(products, prodId) {\n    console.log(products);\n    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n      try {\n        const Id = prodId || this.firestore.createId();\n        const data = Object.assign({\n          Id\n        }, products);\n        const result = yield this.productsCollection.doc(Id).set(data);\n        resolve(result);\n      } catch (err) {\n        reject(err);\n      }\n    }));\n  } //updateProductList($key: string): Promise<void>{   }\n\n\n  deleteProductList(prodId) {\n    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n      try {\n        //const Id = prodId || this.firestore.createId();\n        //const data = {Id, ...products};\n        const result = yield this.productsCollection.doc(prodId).delete();\n        resolve(result);\n      } catch (err) {\n        reject(err);\n      }\n    }));\n  }\n\n  getProduct() {\n    return this.productlist = this.firebase.list('Products');\n  }\n\n  convertImages(image) {\n    var file = image;\n    var pattern = /image-*/;\n    var reader = new FileReader();\n\n    if (!file.byte.match(pattern)) {\n      alert('invalid format');\n      return;\n    } else {}\n  }\n\n};\nProductsService = __decorate([Injectable({\n  providedIn: 'root'\n})], ProductsService);\nexport { ProductsService };","map":null,"metadata":{},"sourceType":"module"}