              "node_modules/@fortawesome/fontawesome-free/scss/fontawesome.scss",
              "node_modules/@fortawesome/fontawesome-free/scss/solid.scss",
              "node_modules/@fortawesome/fontawesome-free/scss/regular.scss",
              "node_modules/@fortawesome/fontawesome-free/scss/brands.scss",
              "node_modules/angular-bootstrap-md/assets/scss/bootstrap/bootstrap.scss",
              "node_modules/angular-bootstrap-md/assets/scss/mdb.scss",
              "node_modules/animate.css/animate.css"

              
              "node_modules/chart.js/dist/Chart.js",
              "node_modules/hammerjs/hammer.min.js",
              
              // "node_modules/bootstrap/dist/js/bootstrap.min.js",
              "node_modules/@popperjs/core/lib/popper.js",
              

              
@import "~animate.css/animate.min.css";
@import "~angular-bootstrap-md/assets/scss/mdb.scss";
@import "~angular-bootstrap-md/assets/scss/msc.scss";
@import "~@fortawesome/fontawesome-free/scss/fontawesome.scss";
@import "~@fortawesome/fontawesome-free/scss/solid.scss";
@import "~@fortawesome/fontawesome-free/scss/regular.scss";
@import "~@fortawesome/fontawesome-free/scss/brands.scss";




<div class="container mb-3 col-md-9" >
    <div class="card border-0" *ngFor="let item of valueitem$ | async">
      <h3 class="card-header text-capitalize">{{ item.name }}</h3>
      <div class="card-body">
        <h5 class="card-title">{{ item.tipo }}</h5>
        <h6 class="card-subtitle text-muted">{{ item.quantity }}</h6>
      </div>
      <div class="img-fluid mb-3 col-md-9">
        <img
          src="{{ item.imageProduct[0] }}"
          class="rounded hover-shadow w-75 h-auto"
          alt=""
        />
      </div>
      <div class="card-body">
        <button
          class="btn btn-primary m-2 text-capitalize"
          (click)="onGoToDetails(item)"
        >
          details
        </button>
      </div>
      <div class="card-footer text-muted">2 days ago</div>
    </div>
    <div class="ui-button-text-icons">
      <button
        class="btn-outline-light text-capitalize"
        [routerLink]="['/productcreate']"
      >
        create form
      </button>
    </div>
</div>




<div class="container mb-3 col-md-9" >
    <div class="card border-0" >
      <h3 class="card-header text-capitalize"></h3>
      <div class="card-body">
        <h5 class="card-title"></h5>
        <h6 class="card-subtitle text-muted"></h6>
      </div>
      <div class="img-fluid mb-3 col-md-9">
        <img
          src=""
          class="rounded hover-shadow w-75 h-auto"
          alt=""
        />
      </div>
      <div class="card-body">
        <button
          class="btn btn-primary m-2 text-capitalize"
        >
          details
        </button>
      </div>
      <div class="card-footer text-muted">2 days ago</div>
    </div>
    <div class="ui-button-text-icons">
      <button
        class="btn-outline-light text-capitalize"
        routerLink="['/productcreate']"
      >
        create form
      </button>
    </div>
</div>


 <div *ngFor="let item of valueitem.imageProduct let i = index" [ngClass]="{'active': i == 0}"
              class="carousel-item " data-mdb-interval="2000">
              <img src={{item}} class="d-block w-100" alt="Camera" />
            </div>



             <form (ngSubmit)="onSubmit()" [formGroup]="quotesForm">
        <input type="hidden" name="Id" Id="ngModel" [(ngModel)]="quotesService.selectQuotes.Id">

        <fieldset>
            <legend>Legend </legend>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label text-capitalize">name </label>
                <div class="col-sm-10">
                    <input type="text" class="form-control-plaintext text-capitalize" name="nameProduct" #nameProduct="ngModel" [(ngModel)]="quotesService.selectQuotes.nameUser" placeholder="insert name of product or service">
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label mt-4 text-capitalize">type</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control-plaintext text-capitalize" name="product" #product="ngModel" [(ngModel)]="quotesService.selectQuotes.product" placeholder="insert type of product or service">
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label mt-4 text-capitalize">price</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control-plaintext text-capitalize" name="quantity" #quantity="ngModel" [(ngModel)]="quotesService.selectQuotes.quantity" placeholder="insert price of product">
                </div>
            </div>
            <div class="form-group">
                <label class="form-label mt-4 text-capitalize">insert description</label>
                <textarea class="form-control " id="exampleTextarea" name="message" #message="ngModel" [(ngModel)]="quotesService.selectQuotes.message" rows="6"></textarea>
            </div>

        </fieldset>
        <fieldset class="form-group mt-5">
            <div class="form-group card">
                <button type="submit" class="btn btn-primary primary "><i class="fa fa-plus-circle "></i>   Submit</button>
            </div>
        </fieldset>
    </form>


     for(const i of archivos) {
      const reader = new FileReader();
      //console.log(this.uploadImage.createImage + '\n');
      reader.readAsDataURL(i);
      reader.onloadend = () => {
        this.finImage.push(reader.result);
        this.uploadImage.uploadImage(this.name, reader.result);     
        console.log(image)
        this.uploadImage
          .createImage(this.name)
          .then((urlImage) => {
            this.urlImagen.push(urlImage);
            console.log(urlImage + '\n' + this.urlImagen);
          });
          
        console.log(this.uploadImage.uploadImage + '\n');
      };
    }


     getBlob(fileRef).then(response => {
      
      console.log(response);
    }).catch(error => console.log(error));



    // const task = this.storage.upload(filepath, item.name, item.imageBase64);
    // item.uploadPercent = task.percentageChanges();
    // task.snapshotChanges().pipe(
    //   imageFunction(item, fileRef)
    // ).subscribe();
    //console.log('aqui ta', imagges.urlImages);
    
